var t,e;t=this,e=function(t,e,a){"use strict";const s="utf8",n=(t,e)=>t instanceof e,o=t=>null==t,r=Object,i=r.keys,c=r.freeze,u=t=>(t=>n(t,r)&&t.constructor==r)(t)&&0==(t=>i(t).length)(t),f=JSON.parse;t.createFilePersister=(t,i)=>((t,f,y,d,l)=>{let p,h,w,v=0,g=0,A=0;const S=[],m=async t=>(2!=v&&(v=1,await L.schedule((async()=>{await t(),v=0}))),L),L={load:async(e,a)=>await m((async()=>{try{t.setContent(await f())}catch{t.setContent([e,a])}})),startAutoLoad:async(a={},s={})=>{return L.stopAutoLoad(),await L.load(a,s),A=1,n=async(e,a)=>await m((async()=>{if(a)t.setTransactionChanges(a());else try{t.setContent(e?.()??await f())}catch{}})),w=e.watch(i,(()=>n())),L;var n},stopAutoLoad:()=>{return A&&(t=w,t?.close(),w=void 0,A=0),L;var t},save:async e=>(1!=v&&(v=2,await L.schedule((async()=>{try{await(async t=>{return await a.writeFile(i,(e=t(),JSON.stringify(e,((t,e)=>n(e,Map)?r.fromEntries([...e]):e))),s);var e})(t.getContent)}catch{}v=0}))),L),startAutoSave:async()=>(await L.stopAutoSave().save(),p=t.addDidFinishTransactionListener(((t,e)=>{const[a,s]=e();u(a)&&u(s)||L.save((()=>[a,s]))})),L),stopAutoSave:()=>{var e,a;return e=p,a=t.delListener,o(e)||a(e),L},schedule:async(...t)=>(((t,...e)=>{t.push(...e)})(S,...t),await(async()=>{if(!g){for(g=1;!o((t=S,h=t.shift()));)try{await h()}catch{}g=0}var t})(),L),getStore:()=>t,destroy:()=>L.stopAutoLoad().stopAutoSave(),getStats:()=>({})};return c(L)})(t,(async()=>f(await a.readFile(i,s))))},"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("fs"),require("fs/promises")):"function"==typeof define&&define.amd?define(["exports","fs","fs/promises"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).TinyBasePersisterFile={},t.fs,t["fs/promises"]);
