var t,e;t=this,e=function(t,e,a){"use strict";const s=t=>typeof t,n=s(""),o="utf8",i=t=>null==t,r=(t,e,a)=>i(t)?a?.():e(t),c=Object,y=t=>c.getPrototypeOf(t),l=c.keys,f=c.freeze,p=t=>(t=>!i(t)&&r(y(t),(t=>t==c.prototype||i(y(t))),(()=>!0)))(t)&&0==(t=>l(t).length)(t),d=JSON.parse,u=t=>new Map(t),h=(t,e)=>t?.get(e),w=(t,e,a)=>{return i(a)?(s=t,n=e,s?.delete(n),t):t?.set(e,a);var s,n},g=(t,e,a)=>{var s,n;return s=t,n=e,s?.has(n)||w(t,e,a()),h(t,e)},v=u(),A=u();t.createFilePersister=(t,y,l)=>((t,e,a,o,c,y,l,[d,u]=[],C=[])=>{let S,b,m,F=0,L=0;g(v,C,(()=>0)),g(A,C,(()=>[]));const T=(l?t.getMergeableContent:null)??t.getContent,M=t.getTransactionChanges,O=async t=>(2!=F&&(F=1,await P.schedule((async()=>{await t(),F=0}))),P),P={load:async(a,o)=>await O((async()=>{try{const a=await e();(l&&(t=>s(t)==n)(a[0])?t.applyMergeableChanges:t.setContent)(a)}catch{t.setContent([a,o])}})),startAutoLoad:async(a={},s={})=>(P.stopAutoLoad(),await P.load(a,s),L=1,m=o((async(a,s)=>{if(s){const e=s();await O((async()=>t.applyChanges(e)))}else await O((async()=>{try{t.setContent(a?.()??await e())}catch(t){y?.(t)}}))})),P),stopAutoLoad:()=>(L&&(c(m),m=void 0,L=0),P),save:async t=>(1!=F&&(F=2,await P.schedule((async()=>{try{await a(T,t)}catch(t){y?.(t)}F=0}))),P),startAutoSave:async()=>(await P.stopAutoSave().save(),S=t.addDidFinishTransactionListener((()=>{const[t,e]=M();p(t)&&p(e)||P.save((()=>[t,e]))})),P),stopAutoSave:()=>(r(S,t.delListener),S=void 0,P),schedule:async(...t)=>(((t,...e)=>{t.push(...e)})(h(A,C),...t),await(async()=>{if(!h(v,C)){for(w(v,C,1);!i((t=h(A,C),b=t.shift()));)try{await b()}catch(t){y?.(t)}w(v,C,0)}var t})(),P),getStore:()=>t,destroy:()=>P.stopAutoLoad().stopAutoSave(),getStats:()=>({})};return d&&(P[d]=()=>u),f(P)})(t,(async()=>d(await a.readFile(y,o))),(async t=>{return await a.writeFile(y,(e=t(),JSON.stringify(e,((t,e)=>e instanceof Map?c.fromEntries([...e]):e))),o);var e}),(t=>e.watch(y,(()=>t()))),(t=>t?.close()),l,!1,["getFilePath",y])},"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("fs"),require("fs/promises")):"function"==typeof define&&define.amd?define(["exports","fs","fs/promises"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).TinyBasePersisterFile={},t.fs,t["fs/promises"]);
