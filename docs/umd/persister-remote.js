var t,e;t=this,e=function(t){"use strict";const e=clearInterval,a=t=>null==t,s=(t,e,s)=>a(t)?s?.():e(t),n=Object,o=t=>n.getPrototypeOf(t),r=n.keys,i=n.freeze,c=t=>(t=>!a(t)&&s(o(t),(t=>t==n.prototype||a(o(t))),(()=>!0)))(t)&&0==(t=>r(t).length)(t),y=JSON.parse,d=t=>new Map(t),l=(t,e)=>t?.get(e),u=(t,e,s)=>{return a(s)?(n=t,o=e,n?.delete(o),t):t?.set(e,s);var n,o},g=(t,e,a,s)=>{var n,o;return n=t,o=e,n?.has(o)?s?.(l(t,e)):u(t,e,a()),l(t,e)},p=d(),h=d(),f=t=>t.headers.get("ETag");t.createRemotePersister=(t,o,r,d=5,v)=>{let w;return((t,e,n,o,r,y,d,f={},v=[])=>{let w,A,C,b=0;g(p,v,(()=>0)),g(h,v,(()=>[]));const[S,T,m,L,M]=((t,e)=>!t||a(e.getMergeableContent)?[0,e.getContent,e.getTransactionChanges,([t,e])=>!c(t)||!c(e),e.setContent]:[1,e.getMergeableContent,e.getTransactionMergeableChanges,([[t],[e]])=>!c(t)||!c(e),e.setDefaultContent])(d,t),O=async t=>(2!=b&&(b=1,await P.schedule((async()=>{await t(),b=0}))),P),x=e=>{var a;(S&&(a=e?.[0],Array.isArray(a))?1===e?.[2]?t.applyMergeableChanges:t.setMergeableContent:1===e?.[2]?t.applyChanges:t.setContent)(e)},P={load:async t=>await O((async()=>{try{x(await e())}catch(e){y?.(e),t&&M(t)}})),startAutoLoad:async t=>(await P.stopAutoLoad().load(t),A=o((async(t,a)=>{const s=a?.();await O((async()=>{try{x(s??t?.()??await e())}catch(t){y?.(t)}}))})),P),stopAutoLoad:()=>(A&&(r(A),A=void 0),P),isAutoLoading:()=>!a(A),save:async t=>(1!=b&&(b=2,await P.schedule((async()=>{try{await n(T,t)}catch(t){y?.(t)}b=0}))),P),startAutoSave:async()=>(await P.stopAutoSave().save(),C=t.addDidFinishTransactionListener((()=>{const t=m();L(t)&&P.save((()=>t))})),P),stopAutoSave:()=>(s(C,t.delListener),C=void 0,P),isAutoSaving:()=>!a(C),schedule:async(...t)=>(((t,...e)=>{t.push(...e)})(l(h,v),...t),await(async()=>{if(!l(p,v)){for(u(p,v,1);!a((t=l(h,v),w=t.shift()));)try{await w()}catch(t){y?.(t)}u(p,v,0)}var t})(),P),getStore:()=>t,destroy:()=>P.stopAutoLoad().stopAutoSave(),getStats:()=>({}),...f};return i(P)})(t,(async()=>{const t=await fetch(o);return w=f(t),y(await t.text())}),(async t=>{return await fetch(r,{method:"POST",headers:{"Content-Type":"application/json"},body:(e=t(),JSON.stringify(e,((t,e)=>e instanceof Map?n.fromEntries([...e]):e)))});var e}),(t=>setInterval((async()=>{const e=await fetch(o,{method:"HEAD"}),s=f(e);a(w)||a(s)||s==w||(w=s,t())}),1e3*d)),(t=>e(t)),v,!1,{getUrls:()=>[o,r]})}},"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).TinyBasePersisterRemote={});
