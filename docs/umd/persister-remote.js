var t,e;t=this,e=function(t){"use strict";const e=t=>typeof t,a=e(""),s=clearInterval,n=t=>null==t,o=(t,e,a)=>n(t)?a?.():e(t),r=Object,i=t=>r.getPrototypeOf(t),c=r.keys,y=r.freeze,d=t=>(t=>!n(t)&&o(i(t),(t=>t==r.prototype||n(i(t))),(()=>!0)))(t)&&0==(t=>c(t).length)(t),l=JSON.parse,p=t=>new Map(t),u=(t,e)=>t?.get(e),f=(t,e,a)=>{return n(a)?(s=t,o=e,s?.delete(o),t):t?.set(e,a);var s,o},h=(t,e,a)=>{var s,n;return s=t,n=e,s?.has(n)||f(t,e,a()),u(t,e)},g=p(),w=p(),v=t=>t.headers.get("ETag");t.createRemotePersister=(t,i,c,p=5,A)=>{let C;return((t,s,r,i,c,l,p,[v,A]=[],C=[])=>{let S,T,b,m=0,L=0;h(g,C,(()=>0)),h(w,C,(()=>[]));const O=(p?t.getMergeableContent:null)??t.getContent,x=t.getTransactionChanges,M=async t=>(2!=m&&(m=1,await P.schedule((async()=>{await t(),m=0}))),P),P={load:async(n,o)=>await M((async()=>{try{const n=await s();(p&&(t=>e(t)==a)(n[0])?t.applyMergeableChanges:t.setContent)(n)}catch{t.setContent([n,o])}})),startAutoLoad:async(e={},a={})=>(P.stopAutoLoad(),await P.load(e,a),L=1,b=i((async(e,a)=>{if(a){const e=a();await M((async()=>t.applyChanges(e)))}else await M((async()=>{try{t.setContent(e?.()??await s())}catch(t){l?.(t)}}))})),P),stopAutoLoad:()=>(L&&(c(b),b=void 0,L=0),P),save:async t=>(1!=m&&(m=2,await P.schedule((async()=>{try{await r(O,t)}catch(t){l?.(t)}m=0}))),P),startAutoSave:async()=>(await P.stopAutoSave().save(),S=t.addDidFinishTransactionListener((()=>{const[t,e]=x();d(t)&&d(e)||P.save((()=>[t,e]))})),P),stopAutoSave:()=>(o(S,t.delListener),S=void 0,P),schedule:async(...t)=>(((t,...e)=>{t.push(...e)})(u(w,C),...t),await(async()=>{if(!u(g,C)){for(f(g,C,1);!n((t=u(w,C),T=t.shift()));)try{await T()}catch(t){l?.(t)}f(g,C,0)}var t})(),P),getStore:()=>t,destroy:()=>P.stopAutoLoad().stopAutoSave(),getStats:()=>({})};return v&&(P[v]=()=>A),y(P)})(t,(async()=>{const t=await fetch(i);return C=v(t),l(await t.text())}),(async t=>{return await fetch(c,{method:"POST",headers:{"Content-Type":"application/json"},body:(e=t(),JSON.stringify(e,((t,e)=>e instanceof Map?r.fromEntries([...e]):e)))});var e}),(t=>setInterval((async()=>{const e=await fetch(i,{method:"HEAD"}),a=v(e);n(C)||n(a)||a==C||(C=a,t())}),1e3*p)),(t=>s(t)),A,!1,["getUrls",[i,c]])}},"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).TinyBasePersisterRemote={});
