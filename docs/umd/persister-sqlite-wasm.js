var a,t;a=this,t=function(a){"use strict";const t=a=>typeof a,e="tinybase",n="",s=",",i=t(n),o=(a,t)=>a.repeat(t),c=Promise,r=clearInterval,l=a=>null==a,y=(a,t,e)=>l(a)?e?.():t(a),w=a=>t(a)==i,u=a=>Array.isArray(a),d=(a,t,e)=>a.slice(t,e),p=a=>a.length,E=async a=>c.all(a),f="_",m="_id",g=a=>`"${a.replace(/"/g,'""')}"`,v="SELECT",h=(a,t="")=>a.join(t),A=(a,t)=>a.map(t),T=a=>0==p(a),C=(a,t)=>a.filter(t),b=(a,...t)=>a.push(...t),N=(a,t)=>a?.has(t)??!1,O=a=>[...a?.values()??[]],L=(a,t)=>a?.delete(t),R=Object,S=a=>R.getPrototypeOf(a),D=R.entries,I=R.keys,M=R.freeze,_=(a=[])=>R.fromEntries(a),P=(...a)=>R.assign({},...a),F=(a,t)=>t in a,j=(a,t)=>A(D(a),(([a,e])=>t(e,a))),x=a=>R.values(a),k=a=>p(I(a)),q=a=>(a=>!l(a)&&y(S(a),(a=>a==R.prototype||l(S(a))),(()=>!0)))(a)&&0==k(a),B=a=>new Map(a),W=a=>[...a?.keys()??[]],H=(a,t)=>a?.get(t),Y=(a,t)=>A([...a?.entries()??[]],(([a,e])=>t(e,a))),$=(a,t,e)=>l(e)?(L(a,t),a):a?.set(t,e),G=(a,t,e,n)=>(N(a,t)?n?.(H(a,t)):$(a,t,e()),H(a,t)),J=(a,t,e,n=$)=>(j(t,((t,n)=>e(a,n,t))),((a,t)=>{((a,t)=>{a?.forEach(t)})(a,((a,e)=>t(e)))})(a,(e=>F(t,e)?0:n(a,e))),a),U=a=>new Set(u(a)||l(a)?a:[a]),V=(a,t)=>a?.add(t),z="TABLE",K="ALTER "+z,Q="DELETE FROM",X=v+"*FROM",Z="FROM pragma_table_",aa="WHERE",ta=(a,t,e,i)=>{const o=B();return[async()=>J(o,_(await E(A(await a("SELECT name "+Z+"list WHERE schema='main'AND(type='table'OR type='view')AND name IN("+na(t)+")ORDER BY name",t),(async({name:t})=>[t,_(A(await a(v+" name,type "+Z+"info(?)",[t]),(({name:a,type:t})=>[a,t])))])))),((a,t,e)=>$(o,t,J(G(o,t,B),e,((a,t,e)=>{e!=H(a,t)&&$(a,t,e)}),((a,t)=>$(a,t))))),((a,t)=>$(o,t))),async(t,e)=>((a,t)=>!l(H(H(o,a),t)))(t,e)?_(C(A(await a(X+g(t)),(a=>{return[a[e],(t={...a},n=e,delete t[n],t)];var t,n})),(([a,t])=>!l(a)&&!q(t)))):{},async(t,e,c,r,y,w=!1)=>{const u=U();j(c??{},(a=>A(I(a??{}),(a=>V(u,a)))));const d=O(u);if(!w&&y&&T(d)&&N(o,t))return await a("DROP "+z+g(t)),void $(o,t);if(T(d)||N(o,t)){const s=H(o,t),i=U(W(s));await E([...A(d,(async e=>{L(i,e)||(await a(K+g(t)+"ADD"+g(e)),$(s,e,n))})),...!w&&r?A(O(i),(async n=>{n!=e&&(await a(K+g(t)+"DROP"+g(n)),$(s,n))})):[]])}else await a("CREATE "+z+g(t)+"("+g(e)+` PRIMARY KEY ON CONFLICT REPLACE${h(A(d,(a=>s+g(a))))});`),$(o,t,B([[e,n],...A(d,(a=>[a,n]))]));if(w)l(c)?await a(Q+g(t)+aa+" 1"):await E(j(c,(async(n,s)=>{l(n)?await a(Q+g(t)+aa+g(e)+"=?",[s]):T(d)||await ea(a,t,e,I(n),[s,...x(n)],i)})));else if(T(d))N(o,t)&&await a(Q+g(t)+aa+" 1");else{const n=C(W(H(o,t)),(a=>a!=e)),s=[],r=[];j(c??{},((a,t)=>{b(s,t,...A(n,(t=>a?.[t]))),b(r,t)})),await ea(a,t,e,n,s,i),await a(Q+g(t)+aa+g(e)+"NOT IN("+na(r)+")",r)}},async t=>{let n;await a("BEGIN");try{n=await t()}catch(a){e?.(a)}return await a("END"),n}]},ea=async(a,t,e,i,c,r=!0)=>await a("INSERT "+(r?n:"OR REPLACE ")+"INTO"+g(t)+"("+g(e)+h(A(i,(a=>s+g(a))))+")VALUES"+d(o(`,(?${o(",?",p(i))})`,p(c)/(p(i)+1)),1)+(r?"ON CONFLICT("+g(e)+")DO UPDATE SET"+h(A(i,(a=>g(a)+"=excluded."+g(a))),s):n),A(c,(a=>a??null))),na=a=>h(A(a,(()=>"?")),s),sa=JSON.parse,ia=B(),oa=B(),ca=(a,t,e,n,s,i,o,c={},r=[])=>{let w,d,p,E=0;G(ia,r,(()=>0)),G(oa,r,(()=>[]));const[f,m,g,v,h]=((a,t)=>!a||l(t.getMergeableContent)?[0,t.getContent,t.getTransactionChanges,([a,t])=>!q(a)||!q(t),t.setContent]:[1,t.getMergeableContent,t.getTransactionMergeableChanges,([[a],[t]])=>!q(a)||!q(t),t.setDefaultContent])(o,a),A=async a=>(2!=E&&(E=1,await C.schedule((async()=>{await a(),E=0}))),C),T=t=>{(f&&u(t?.[0])?1===t?.[2]?a.applyMergeableChanges:a.setMergeableContent:1===t?.[2]?a.applyChanges:a.setContent)(t)},C={load:async a=>await A((async()=>{try{T(await t())}catch(t){i?.(t),a&&h(a)}})),startAutoLoad:async a=>(await C.stopAutoLoad().load(a),d=n((async(a,e)=>{const n=e?.();await A((async()=>{try{T(n??a?.()??await t())}catch(a){i?.(a)}}))})),C),stopAutoLoad:()=>(d&&(s(d),d=void 0),C),isAutoLoading:()=>!l(d),save:async a=>(1!=E&&(E=2,await C.schedule((async()=>{try{await e(m,a)}catch(a){i?.(a)}E=0}))),C),startAutoSave:async()=>(await C.stopAutoSave().save(),p=a.addDidFinishTransactionListener((()=>{const a=g();v(a)&&C.save((()=>a))})),C),stopAutoSave:()=>(y(p,a.delListener),p=void 0,C),isAutoSaving:()=>!l(p),schedule:async(...a)=>(b(H(oa,r),...a),await(async()=>{if(!H(ia,r)){for($(ia,r,1);!l((a=H(oa,r),w=a.shift()));)try{await w()}catch(a){i?.(a)}$(ia,r,0)}var a})(),C),getStore:()=>a,destroy:()=>C.stopAutoLoad().stopAutoSave(),getStats:()=>({}),...c};return M(C)},ra="store",la=(a,t,e,n,s,[i],o,c,r,l)=>{const[y,w,u,d]=ta(t,o,s,l);return ca(a,(async()=>await d((async()=>(await y(),sa((await w(i,m))[f]?.[ra]??"null"))))),(async a=>await d((async()=>{var t;await y(),await u(i,m,{[f]:{[ra]:(t=a()??null,JSON.stringify(t,((a,t)=>t instanceof Map?R.fromEntries([...t]):t)))}},!0,!0)}))),e,n,s,!1,{[r]:()=>c},c)},ya=(a,t,e,n,s,[i,o,[c,r,y]],w,u,d,p)=>{const[g,v,h,A]=ta(t,w,s,p),T=async(a,t)=>await E(Y(o,(async([e,n,s,i],o)=>{t&&!F(a,o)||await h(e,n,a[o],s,i,t)}))),b=async(a,t)=>r?await h(y,m,{[f]:a},!0,!0,t):null;return ca(a,(async()=>await A((async()=>{await g();const a=await(async()=>_(C(await E(Y(i,(async([a,t],e)=>[a,await v(e,t)]))),(a=>!q(a[1])))))(),t=await(async()=>c?(await v(y,m))[f]:{})();return q(a)&&l(t)?void 0:[a,t]}))),(async(a,t)=>await A((async()=>{if(await g(),l(t)){const[t,e]=a();await T(t),await b(e)}else{const[a,e]=t();await T(a,!0),await b(e,!0)}}))),e,n,s,!1,{[d]:()=>u},u)},wa="json",ua="autoLoadIntervalSeconds",da="rowIdColumnName",pa="tableId",Ea="tableName",fa={mode:wa,[ua]:1},ma={load:0,save:0,[Ea]:e+"_values"},ga=(a,t,e,n)=>{const s=B();return j(a,((a,i)=>{const o=d(x(P(t,w(a)?{[e]:a}:a)),0,k(t));l(o[0])||n(i,o[0])||$(s,i,o)})),s},va="pragma ",ha="data_version",Aa="schema_version",Ta=(a,t,n,s,i,o,c,l,y="getDb",u)=>{let p,E,f;const[g,h,A,T]=(a=>{const t=(a=>P(fa,w(a)?{storeTableName:a}:a??{}))(a),n=t[ua];if(t.mode==wa){const{storeTableName:a=e}=t;return[1,n,[a],U(a)]}const{tables:{load:s={},save:i={}}={},values:o={}}=t,c=d(x(P(ma,o)),0,k(ma)),r=c[2],l=U(r);return[0,n,[ga(s,{[pa]:null,[da]:m},pa,(a=>V(l,a)&&a==r)),ga(i,{[Ea]:null,[da]:m,deleteEmptyColumns:0,deleteEmptyTable:0},Ea,((a,t)=>V(l,t)&&t==r)),c],l]})(t);return(g?la:ya)(a,o?async(a,t)=>(o(a,t),await n(a,t)):n,(a=>{return[(t=async()=>{try{const t=(await n(va+ha))[0][ha],e=(await n(va+Aa))[0][Aa],s=(await n(v+" TOTAL_CHANGES() c"))[0].c;t==(p??=t)&&e==(E??=e)&&s==(f??=s)||(a(),p=t,E=e)}catch{}},e=h,t(),setInterval(t,1e3*e)),s((t=>T.has(t)?a():0))];var t,e}),(([a,t])=>{r(a),p=E=null,i(t)}),c,A,O(T),l,y,u)};a.createSqliteWasmPersister=(a,t,e,n,s,i)=>Ta(a,n,(async(a,t=[])=>e.exec(a,{bind:t,rowMode:"object",returnValue:"resultRows"}).map((a=>({...a})))),(a=>t.capi.sqlite3_update_hook(e,((t,e,n,s)=>a(s)),0)),(()=>t.capi.sqlite3_update_hook(e,(()=>0),0)),s,i,e)},"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((a="undefined"!=typeof globalThis?globalThis:a||self).TinyBasePersisterSqliteWasm={});
