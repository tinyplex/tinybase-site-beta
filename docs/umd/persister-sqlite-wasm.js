var a,t;a=this,t=function(a){"use strict";const t=a=>typeof a,e="tinybase",n="",s=",",i=t(n),o=(a,t)=>a.repeat(t),c=Promise,r=clearInterval,l=a=>null==a,y=(a,t,e)=>l(a)?e?.():t(a),w=a=>t(a)==i,u=(a,t,e)=>a.slice(t,e),d=a=>a.length,p=async a=>c.all(a),E="_",f="_id",m=a=>`"${a.replace(/"/g,'""')}"`,g="SELECT",v=(a,t="")=>a.join(t),h=(a,t)=>a.map(t),A=a=>0==d(a),T=(a,t)=>a.filter(t),C=(a,...t)=>a.push(...t),b=(a,t)=>a?.has(t)??!1,N=a=>[...a?.values()??[]],O=(a,t)=>a?.delete(t),L=Object,R=a=>L.getPrototypeOf(a),S=L.entries,D=L.keys,I=L.freeze,M=(a=[])=>L.fromEntries(a),_=(...a)=>L.assign({},...a),P=(a,t)=>t in a,F=(a,t)=>h(S(a),(([a,e])=>t(e,a))),j=a=>L.values(a),x=a=>d(D(a)),k=a=>(a=>!l(a)&&y(R(a),(a=>a==L.prototype||l(R(a))),(()=>!0)))(a)&&0==x(a),q=a=>new Map(a),B=a=>[...a?.keys()??[]],W=(a,t)=>a?.get(t),H=(a,t)=>h([...a?.entries()??[]],(([a,e])=>t(e,a))),Y=(a,t,e)=>l(e)?(O(a,t),a):a?.set(t,e),$=(a,t,e,n)=>(b(a,t)?n?.(W(a,t)):Y(a,t,e()),W(a,t)),G=(a,t,e,n=Y)=>(F(t,((t,n)=>e(a,n,t))),((a,t)=>{((a,t)=>{a?.forEach(t)})(a,((a,e)=>t(e)))})(a,(e=>P(t,e)?0:n(a,e))),a),J=a=>new Set(Array.isArray(a)||l(a)?a:[a]),U=(a,t)=>a?.add(t),V="TABLE",z="ALTER "+V,K="DELETE FROM",Q=g+"*FROM",X="FROM pragma_table_",Z="WHERE",aa=(a,t,e,i)=>{const o=q();return[async()=>G(o,M(await p(h(await a("SELECT name "+X+"list WHERE schema='main'AND(type='table'OR type='view')AND name IN("+ea(t)+")ORDER BY name",t),(async({name:t})=>[t,M(h(await a(g+" name,type "+X+"info(?)",[t]),(({name:a,type:t})=>[a,t])))])))),((a,t,e)=>Y(o,t,G($(o,t,q),e,((a,t,e)=>{e!=W(a,t)&&Y(a,t,e)}),((a,t)=>Y(a,t))))),((a,t)=>Y(o,t))),async(t,e)=>((a,t)=>!l(W(W(o,a),t)))(t,e)?M(T(h(await a(Q+m(t)),(a=>{return[a[e],(t={...a},n=e,delete t[n],t)];var t,n})),(([a,t])=>!l(a)&&!k(t)))):{},async(t,e,c,r,y,w=!1)=>{const u=J();F(c??{},(a=>h(D(a??{}),(a=>U(u,a)))));const d=N(u);if(!w&&y&&A(d)&&b(o,t))return await a("DROP "+V+m(t)),void Y(o,t);if(A(d)||b(o,t)){const s=W(o,t),i=J(B(s));await p([...h(d,(async e=>{O(i,e)||(await a(z+m(t)+"ADD"+m(e)),Y(s,e,n))})),...!w&&r?h(N(i),(async n=>{n!=e&&(await a(z+m(t)+"DROP"+m(n)),Y(s,n))})):[]])}else await a("CREATE "+V+m(t)+"("+m(e)+` PRIMARY KEY ON CONFLICT REPLACE${v(h(d,(a=>s+m(a))))});`),Y(o,t,q([[e,n],...h(d,(a=>[a,n]))]));if(w)l(c)?await a(K+m(t)+Z+" 1"):await p(F(c,(async(n,s)=>{l(n)?await a(K+m(t)+Z+m(e)+"=?",[s]):A(d)||await ta(a,t,e,D(n),[s,...j(n)],i)})));else if(A(d))b(o,t)&&await a(K+m(t)+Z+" 1");else{const n=T(B(W(o,t)),(a=>a!=e)),s=[],r=[];F(c??{},((a,t)=>{C(s,t,...h(n,(t=>a?.[t]))),C(r,t)})),await ta(a,t,e,n,s,i),await a(K+m(t)+Z+m(e)+"NOT IN("+ea(r)+")",r)}},async t=>{let n;await a("BEGIN");try{n=await t()}catch(a){e?.(a)}return await a("END"),n}]},ta=async(a,t,e,i,c,r=!0)=>await a("INSERT "+(r?n:"OR REPLACE ")+"INTO"+m(t)+"("+m(e)+v(h(i,(a=>s+m(a))))+")VALUES"+u(o(`,(?${o(",?",d(i))})`,d(c)/(d(i)+1)),1)+(r?"ON CONFLICT("+m(e)+")DO UPDATE SET"+v(h(i,(a=>m(a)+"=excluded."+m(a))),s):n),h(c,(a=>a??null))),ea=a=>v(h(a,(()=>"?")),s),na=JSON.parse,sa=q(),ia=q(),oa=(a,t,e,n,s,i,o,c={},r=[])=>{let u,d,p,E=0;$(sa,r,(()=>0)),$(ia,r,(()=>[]));const[f,m,g,v,h]=((a,t)=>!a||l(t.getMergeableContent)?[0,t.getContent,t.getTransactionChanges,([a,t])=>!k(a)||!k(t),t.setContent]:[1,t.getMergeableContent,t.getTransactionMergeableChanges,([,[[,a],[,t]]])=>!k(a)||!k(t),t.setDefaultContent])(o,a),A=async a=>(2!=E&&(E=1,await b.schedule((async()=>{await a(),E=0}))),b),T=t=>{(f&&w(t?.[0])?1===t?.[1][2]?a.applyMergeableChanges:a.setMergeableContent:1===t?.[2]?a.applyChanges:a.setContent)(t)},b={load:async a=>await A((async()=>{try{T(await t())}catch(t){i?.(t),a&&h(a)}})),startAutoLoad:async a=>(await b.stopAutoLoad().load(a),d=n((async(a,e)=>{const n=e?.();await A((async()=>{try{T(n??a?.()??await t())}catch(a){i?.(a)}}))})),b),stopAutoLoad:()=>(d&&(s(d),d=void 0),b),isAutoLoading:()=>!l(d),save:async a=>(1!=E&&(E=2,await b.schedule((async()=>{try{await e(m,a)}catch(a){i?.(a)}E=0}))),b),startAutoSave:async()=>(await b.stopAutoSave().save(),p=a.addDidFinishTransactionListener((()=>{const a=g();v(a)&&b.save((()=>a))})),b),stopAutoSave:()=>(y(p,a.delListener),p=void 0,b),isAutoSaving:()=>!l(p),schedule:async(...a)=>(C(W(ia,r),...a),await(async()=>{if(!W(sa,r)){for(Y(sa,r,1);!l((a=W(ia,r),u=a.shift()));)try{await u()}catch(a){i?.(a)}Y(sa,r,0)}var a})(),b),getStore:()=>a,destroy:()=>b.stopAutoLoad().stopAutoSave(),getStats:()=>({}),...c};return I(b)},ca="store",ra=(a,t,e,n,s,[i],o,c,r,l)=>{const[y,w,u,d]=aa(t,o,s,l);return oa(a,(async()=>await d((async()=>(await y(),na((await w(i,f))[E]?.[ca]??"null"))))),(async a=>await d((async()=>{var t;await y(),await u(i,f,{[E]:{[ca]:(t=a()??null,JSON.stringify(t,((a,t)=>t instanceof Map?L.fromEntries([...t]):t)))}},!0,!0)}))),e,n,s,!1,{[r]:()=>c},c)},la=(a,t,e,n,s,[i,o,[c,r,y]],w,u,d,m)=>{const[g,v,h,A]=aa(t,w,s,m),C=async(a,t)=>await p(H(o,(async([e,n,s,i],o)=>{t&&!P(a,o)||await h(e,n,a[o],s,i,t)}))),b=async(a,t)=>r?await h(y,f,{[E]:a},!0,!0,t):null;return oa(a,(async()=>await A((async()=>{await g();const a=await(async()=>M(T(await p(H(i,(async([a,t],e)=>[a,await v(e,t)]))),(a=>!k(a[1])))))(),t=await(async()=>c?(await v(y,f))[E]:{})();return k(a)&&l(t)?void 0:[a,t]}))),(async(a,t)=>await A((async()=>{if(await g(),l(t)){const[t,e]=a();await C(t),await b(e)}else{const[a,e]=t();await C(a,!0),await b(e,!0)}}))),e,n,s,!1,{[d]:()=>u},u)},ya="json",wa="autoLoadIntervalSeconds",ua="rowIdColumnName",da="tableId",pa="tableName",Ea={mode:ya,[wa]:1},fa={load:0,save:0,[pa]:e+"_values"},ma=(a,t,e,n)=>{const s=q();return F(a,((a,i)=>{const o=u(j(_(t,w(a)?{[e]:a}:a)),0,x(t));l(o[0])||n(i,o[0])||Y(s,i,o)})),s},ga="pragma ",va="data_version",ha="schema_version",Aa=(a,t,n,s,i,o,c,l,y="getDb",d)=>{let p,E,m;const[v,h,A,T]=(a=>{const t=(a=>_(Ea,w(a)?{storeTableName:a}:a??{}))(a),n=t[wa];if(t.mode==ya){const{storeTableName:a=e}=t;return[1,n,[a],J(a)]}const{tables:{load:s={},save:i={}}={},values:o={}}=t,c=u(j(_(fa,o)),0,x(fa)),r=c[2],l=J(r);return[0,n,[ma(s,{[da]:null,[ua]:f},da,(a=>U(l,a)&&a==r)),ma(i,{[pa]:null,[ua]:f,deleteEmptyColumns:0,deleteEmptyTable:0},pa,((a,t)=>U(l,t)&&t==r)),c],l]})(t);return(v?ra:la)(a,o?async(a,t)=>(o(a,t),await n(a,t)):n,(a=>{return[(t=async()=>{try{const t=(await n(ga+va))[0][va],e=(await n(ga+ha))[0][ha],s=(await n(g+" TOTAL_CHANGES() c"))[0].c;t==(p??=t)&&e==(E??=e)&&s==(m??=s)||(a(),p=t,E=e)}catch{}},e=h,t(),setInterval(t,1e3*e)),s((t=>T.has(t)?a():0))];var t,e}),(([a,t])=>{r(a),p=E=null,i(t)}),c,A,N(T),l,y,d)};a.createSqliteWasmPersister=(a,t,e,n,s,i)=>Aa(a,n,(async(a,t=[])=>e.exec(a,{bind:t,rowMode:"object",returnValue:"resultRows"}).map((a=>({...a})))),(a=>t.capi.sqlite3_update_hook(e,((t,e,n,s)=>a(s)),0)),(()=>t.capi.sqlite3_update_hook(e,(()=>0),0)),s,i,e)},"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((a="undefined"!=typeof globalThis?globalThis:a||self).TinyBasePersisterSqliteWasm={});
