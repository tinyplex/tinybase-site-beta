var a,t;a=this,t=function(a){"use strict";const t=a=>typeof a,e="tinybase",s="",n=",",i=t(s),o=(a,t)=>a.repeat(t),c=Promise,r=clearInterval,l=a=>null==a,y=(a,t,e)=>l(a)?e?.():t(a),w=a=>t(a)==i,u=(a,t,e)=>a.slice(t,e),d=a=>a.length,E=async a=>c.all(a),p="_",f="_id",m=a=>`"${a.replace(/"/g,'""')}"`,T="SELECT",v=(a,t="")=>a.join(t),A=(a,t)=>a.map(t),L=a=>0==d(a),R=(a,t)=>a.filter(t),h=(a,...t)=>a.push(...t),O=(a,t)=>a?.has(t)??!1,N=a=>[...a?.values()??[]],S=(a,t)=>a?.delete(t),C=Object,b=a=>C.getPrototypeOf(a),D=C.entries,g=C.keys,I=C.freeze,_=(a=[])=>C.fromEntries(a),M=(...a)=>C.assign({},...a),P=(a,t)=>A(D(a),(([a,e])=>t(e,a))),F=a=>C.values(a),$=a=>d(g(a)),B=a=>(a=>!l(a)&&y(b(a),(a=>a==C.prototype||l(b(a))),(()=>!0)))(a)&&0==$(a),W=a=>new Map(a),j=a=>[...a?.keys()??[]],x=(a,t)=>a?.get(t),H=(a,t)=>A([...a?.entries()??[]],(([a,e])=>t(e,a))),k=(a,t,e)=>l(e)?(S(a,t),a):a?.set(t,e),q=(a,t,e)=>(O(a,t)||k(a,t,e()),x(a,t)),Y=(a,t,e,s=k)=>(P(t,((t,s)=>e(a,s,t))),((a,t)=>{((a,t)=>{a?.forEach(t)})(a,((a,e)=>t(e)))})(a,(e=>((a,t)=>!l(((a,t)=>y(a,(a=>a[t])))(a,t)))(t,e)?0:s(a,e))),a),G=a=>new Set(Array.isArray(a)||l(a)?a:[a]),J=(a,t)=>a?.add(t),U=T+"*FROM",V="FROM pragma_table_",z="WHERE",K=(a,t,e,i)=>{const o=W();return[async()=>Y(o,_(await E(A(await a("SELECT name "+V+"list WHERE schema='main'AND(type='table'OR type='view')AND name IN("+X(t)+")ORDER BY name",t),(async({name:t})=>[t,_(A(await a(T+" name,type "+V+"info(?)",[t]),(({name:a,type:t})=>[a,t])))])))),((a,t,e)=>k(o,t,Y(q(o,t,W),e,((a,t,e)=>{e!=x(a,t)&&k(a,t,e)}),((a,t)=>k(a,t))))),((a,t)=>k(o,t))),async(t,e)=>((a,t)=>!l(x(x(o,a),t)))(t,e)?_(R(A(await a(U+m(t)),(a=>{return[a[e],(t={...a},s=e,delete t[s],t)];var t,s})),(([a,t])=>!l(a)&&!B(t)))):{},async(t,e,c,r,y,w=!1)=>{const u=G();P(c??{},(a=>A(g(a??{}),(a=>J(u,a)))));const d=N(u);if(!w&&y&&L(d)&&O(o,t))return await a("DROP TABLE"+m(t)),void k(o,t);if(L(d)||O(o,t)){const n=x(o,t),i=G(j(n));await E([...A(d,(async e=>{S(i,e)||(await a(`ALTER TABLE${m(t)}ADD${m(e)}`),k(n,e,s))})),...!w&&r?A(N(i),(async s=>{s!=e&&(await a(`ALTER TABLE${m(t)}DROP${m(s)}`),k(n,s))})):[]])}else await a(`CREATE TABLE${m(t)}(${m(e)} PRIMARY KEY ON CONFLICT REPLACE${v(A(d,(a=>n+m(a))))});`),k(o,t,W([[e,s],...A(d,(a=>[a,s]))]));if(w)l(c)?await a("DELETE FROM"+m(t)+"WHERE 1"):await E(P(c,(async(s,n)=>{l(s)?await a("DELETE FROM"+m(t)+z+m(e)+"=?",[n]):L(d)||await Q(a,t,e,g(s),[n,...F(s)],i)})));else if(L(d))O(o,t)&&await a("DELETE FROM"+m(t)+"WHERE 1");else{const s=R(j(x(o,t)),(a=>a!=e)),n=[],i=[];P(c??{},((a,t)=>{h(n,t,...A(s,(t=>a?.[t]))),h(i,t)})),await Q(a,t,e,s,n),await a("DELETE FROM"+m(t)+z+m(e)+"NOT IN("+X(i)+")",i)}},async t=>{let s;await a("BEGIN");try{s=await t()}catch(a){e?.(a)}return await a("END"),s}]},Q=async(a,t,e,i,c,r=!0)=>await a("INSERT "+(r?s:"OR REPLACE ")+"INTO"+m(t)+"("+m(e)+v(A(i,(a=>n+m(a))))+")VALUES"+u(o(`,(?${o(",?",d(i))})`,d(c)/(d(i)+1)),1)+(r?"ON CONFLICT("+m(e)+")DO UPDATE SET"+v(A(i,(a=>m(a)+"=excluded."+m(a))),n):s),c),X=a=>v(A(a,(()=>"?")),n),Z=JSON.parse,aa=W(),ta=W(),ea=(a,t,e,s,n,i,[o,c]=[],r=[])=>{let w,u,d,E=0,p=0;q(aa,r,(()=>0)),q(ta,r,(()=>[]));const f=async a=>(2!=E&&(E=1,await m.schedule((async()=>{await a(),E=0}))),m),m={load:async(e,s)=>await f((async()=>{try{a.setContent(await t())}catch{a.setContent([e,s])}})),startAutoLoad:async(e={},n={})=>(m.stopAutoLoad(),await m.load(e,n),p=1,d=s((async(e,s)=>{if(s){const t=s();await f((async()=>a.setTransactionChanges(t)))}else await f((async()=>{try{a.setContent(e?.()??await t())}catch(a){i?.(a)}}))})),m),stopAutoLoad:()=>(p&&(n(d),d=void 0,p=0),m),save:async t=>(1!=E&&(E=2,await m.schedule((async()=>{try{await e(a.getContent,t)}catch(a){i?.(a)}E=0}))),m),startAutoSave:async()=>(await m.stopAutoSave().save(),w=a.addDidFinishTransactionListener(((a,t)=>{const[e,s]=t();B(e)&&B(s)||m.save((()=>[e,s]))})),m),stopAutoSave:()=>(y(w,a.delListener),w=void 0,m),schedule:async(...a)=>(h(x(ta,r),...a),await(async()=>{if(!x(aa,r)){for(k(aa,r,1);!l((a=x(ta,r),u=a.shift()));)try{await u()}catch(a){i?.(a)}k(aa,r,0)}var a})(),m),getStore:()=>a,destroy:()=>m.stopAutoLoad().stopAutoSave(),getStats:()=>({})};return o&&(m[o]=()=>c),I(m)},sa="store",na=(a,t,e,s,n,[i],o,c,r)=>{const[l,y,w,u]=K(t,o,n);return ea(a,(async()=>await u((async()=>(await l(),Z((await y(i,f))[p]?.[sa]??"null"))))),(async a=>await u((async()=>{var t;await l(),await w(i,f,{[p]:{[sa]:(t=a()??null,JSON.stringify(t,((a,t)=>t instanceof Map?C.fromEntries([...t]):t)))}},!0,!0)}))),e,s,n,[r,c],c)},ia=(a,t,e,s,n,[i,o,[c,r,y]],w,u,d,m)=>{const[T,v,A,L]=K(t,w,n,m),h=async(a,t)=>await E(H(o,(async([e,s,n,i],o)=>{const c=a[o];t&&void 0===c||await A(e,s,c,n,i,t)}))),O=async(a,t)=>r?await A(y,f,{[p]:a},!0,!0,t):null;return ea(a,(async()=>await L((async()=>{await T();const a=await(async()=>_(R(await E(H(i,(async([a,t],e)=>[a,await v(e,t)]))),(a=>!B(a[1])))))(),t=await(async()=>c?(await v(y,f))[p]:{})();return B(a)&&l(t)?void 0:[a,t]}))),(async(a,t)=>await L((async()=>{if(await T(),l(t)){const[t,e]=a();await h(t),await O(e)}else{const[a,e]=t();await h(a,!0),await O(e,!0)}}))),e,s,n,[d,u],u)},oa="json",ca="autoLoadIntervalSeconds",ra="rowIdColumnName",la="tableId",ya="tableName",wa={mode:oa,[ca]:1},ua={load:0,save:0,[ya]:e+"_values"},da=(a,t,e,s)=>{const n=W();return P(a,((a,i)=>{const o=u(F(M(t,w(a)?{[e]:a}:a)),0,$(t));l(o[0])||s(i,o[0])||k(n,i,o)})),n},Ea="pragma ",pa="data_version",fa="schema_version",ma=(a,t,s,n,i,o,c,l,y="getDb",d)=>{let E,p,m;const[v,A,L,R]=(a=>{const t=(a=>M(wa,w(a)?{storeTableName:a}:a??{}))(a),s=t[ca];if(t.mode==oa){const{storeTableName:a=e}=t;return[1,s,[a],G(a)]}const{tables:{load:n={},save:i={}}={},values:o={}}=t,c=u(F(M(ua,o)),0,$(ua)),r=c[2],l=G(r);return[0,s,[da(n,{[la]:null,[ra]:f},la,(a=>J(l,a)&&a==r)),da(i,{[ya]:null,[ra]:f,deleteEmptyColumns:0,deleteEmptyTable:0},ya,((a,t)=>J(l,t)&&t==r)),c],l]})(t);return(v?na:ia)(a,o?async(a,t)=>(o(a,t),await s(a,t)):s,(a=>{return[(t=async()=>{try{const t=(await s(Ea+pa))[0][pa],e=(await s(Ea+fa))[0][fa],n=(await s(T+" TOTAL_CHANGES() c"))[0].c;t==(E??=t)&&e==(p??=e)&&n==(m??=n)||(a(),E=t,p=e)}catch{}},e=A,t(),setInterval(t,1e3*e)),n((t=>R.has(t)?a():0))];var t,e}),(([a,t])=>{r(a),E=p=null,i(t)}),c,L,N(R),l,y,d)};a.createSqliteWasmPersister=(a,t,e,s,n,i)=>ma(a,s,(async(a,t=[])=>e.exec(a,{bind:t,rowMode:"object",returnValue:"resultRows"}).map((a=>({...a})))),(a=>t.capi.sqlite3_update_hook(e,((t,e,s,n)=>a(n)),0)),(()=>t.capi.sqlite3_update_hook(e,(()=>0),0)),n,i,e)},"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((a="undefined"!=typeof globalThis?globalThis:a||self).TinyBasePersisterSqliteWasm={});
