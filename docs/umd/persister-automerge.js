var t,e;t=this,e=function(t){"use strict";const e=t=>null==t,a=(t,a,s)=>e(t)?s?.():a(t),s=Object,n=t=>s.getPrototypeOf(t),o=s.keys,c=s.freeze,i=(t,e)=>a(t,(t=>t[e])),r=(t,a)=>!e(i(t,a)),d=(t,e)=>(delete t[e],t),y=(t,e)=>((t,e)=>t.map(e))(s.entries(t),(([t,a])=>e(a,t))),u=t=>o(t).length,l=t=>(t=>!e(t)&&a(n(t),(t=>t==s.prototype||e(n(t))),(()=>!0)))(t)&&0==u(t),f=t=>new Map(t),h=(t,e)=>t?.get(e),p=(t,a,s)=>{return e(s)?(n=t,o=a,n?.delete(o),t):t?.set(a,s);var n,o},v=(t,e,a)=>{var s,n;return s=t,n=e,s?.has(n)||p(t,e,a()),h(t,e)},g=f(),w=f(),A=(t,e)=>[t[e].t,t[e].v],L=(t,a,s,n)=>{const o=e(a)?t:((t,e,a)=>(r(t,e)||(t[e]={}),t[e]))(t,a);let c;return y(s,((t,e)=>{n(o,e,t)&&(c=1)})),y(o,((t,e)=>{r(s,e)||(d(o,e),c=1)})),!e(a)&&l(o)&&d(t,a),c};t.createAutomergePersister=(t,s,n="tinybase",o)=>(s.change((t=>t[n]={})),((t,s,n,o,i,r,[d,y]=[],u=[])=>{let f,A,L,m=0,S=0;v(g,u,(()=>0)),v(w,u,(()=>[]));const b=async t=>(2!=m&&(m=1,await C.schedule((async()=>{await t(),m=0}))),C),C={load:async(e,a)=>await b((async()=>{try{t.setContent(await s())}catch{t.setContent([e,a])}})),startAutoLoad:async(e={},a={})=>(C.stopAutoLoad(),await C.load(e,a),S=1,L=o((async(e,a)=>{if(a){const e=a();await b((async()=>t.setTransactionChanges(e)))}else await b((async()=>{try{t.setContent(e?.()??await s())}catch(t){r?.(t)}}))})),C),stopAutoLoad:()=>(S&&(i(L),L=void 0,S=0),C),save:async e=>(1!=m&&(m=2,await C.schedule((async()=>{try{await n(t.getContent,e)}catch(t){r?.(t)}m=0}))),C),startAutoSave:async()=>(await C.stopAutoSave().save(),f=t.addDidFinishTransactionListener(((t,e)=>{const[a,s]=e();l(a)&&l(s)||C.save((()=>[a,s]))})),C),stopAutoSave:()=>(a(f,t.delListener),f=void 0,C),schedule:async(...t)=>(((t,...e)=>{t.push(...e)})(h(w,u),...t),await(async()=>{if(!h(g,u)){for(p(g,u,1);!e((t=h(w,u),A=t.shift()));)try{await A()}catch(t){r?.(t)}p(g,u,0)}var t})(),C),getStore:()=>t,destroy:()=>C.stopAutoLoad().stopAutoSave(),getStats:()=>({})};return d&&(C[d]=()=>y),c(C)})(t,(async()=>2==u(s.doc[n])?A(s.doc,n):void 0),(async(t,o)=>s.change((s=>((t,s,n,o)=>{((t,e)=>{l(t[e])&&(t[e]={t:{},v:{}})})(t,s);const[c,r]=A(t,s),u=()=>{f=1};let f=1;if(a(o?.(),(([t,s])=>{f=0,y(t,((t,s)=>f?0:e(t)?d(c,s):a(c[s],(s=>y(t,((t,n)=>f?0:e(t)?d(s,n):a(i(s,n),(a=>y(t,((t,s)=>e(t)?d(a,s):a[s]=t))),u)))),u))),y(s,((t,a)=>f?0:e(t)?d(r,a):r[a]=t))})),f){const[t,e]=n();L(c,void 0,t,((t,e,a)=>L(c,e,a,((t,e,a)=>L(t,e,a,((t,e,a)=>{if(i(t,e)!==a)return t[e]=a,1})))))),L(r,void 0,e,((t,e,a)=>{i(r,e)!==a&&(r[e]=a)}))}})(s,n,t,o)))),(t=>{const e=({doc:e})=>t((()=>A(e,n)));return s.on("change",e),e}),(t=>{s.removeListener("change",t)}),o,["getDocHandle",s]))},"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).TinyBasePersisterAutomerge={});
