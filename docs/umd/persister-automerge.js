var t,e;t=this,e=function(t){"use strict";const e=t=>null==t,a=(t,a,s)=>e(t)?s?.():a(t),s=Object,n=s.keys,o=s.freeze,c=(t,e)=>a(t,(t=>t[e])),i=(t,a)=>!e(c(t,a)),r=(t,e)=>(delete t[e],t),d=(t,e)=>((t,e)=>t.map(e))(s.entries(t),(([t,a])=>e(a,t))),u=t=>n(t).length,y=t=>(t=>t instanceof s&&t.constructor==s)(t)&&0==u(t),l=t=>new Map(t),f=(t,e)=>t?.get(e),h=(t,a,s)=>{return e(s)?(n=t,o=a,n?.delete(o),t):t?.set(a,s);var n,o},v=(t,e,a)=>{var s,n;return s=t,n=e,s?.has(n)||h(t,e,a()),f(t,e)},p=l(),g=l(),w=(t,e)=>[t[e].t,t[e].v],A=(t,a,s,n)=>{const o=e(a)?t:((t,e,a)=>(i(t,e)||(t[e]={}),t[e]))(t,a);let c;return d(s,((t,e)=>{n(o,e,t)&&(c=1)})),d(o,((t,e)=>{i(s,e)||(r(o,e),c=1)})),!e(a)&&y(o)&&r(t,a),c};t.createAutomergePersister=(t,s,n="tinybase",i)=>(s.change((t=>t[n]={})),((t,s,n,c,i,r,[d,u]=[],l=[])=>{let w,A,L,m=0,S=0;v(p,l,(()=>0)),v(g,l,(()=>[]));const b=async t=>(2!=m&&(m=1,await C.schedule((async()=>{await t(),m=0}))),C),C={load:async(e,a)=>await b((async()=>{try{t.setContent(await s())}catch{t.setContent([e,a])}})),startAutoLoad:async(e={},a={})=>(C.stopAutoLoad(),await C.load(e,a),S=1,L=c((async(e,a)=>{if(a){const e=a();await b((async()=>t.setTransactionChanges(e)))}else await b((async()=>{try{t.setContent(e?.()??await s())}catch(t){r?.(t)}}))})),C),stopAutoLoad:()=>(S&&(i(L),L=void 0,S=0),C),save:async e=>(1!=m&&(m=2,await C.schedule((async()=>{try{await n(t.getContent,e)}catch(t){r?.(t)}m=0}))),C),startAutoSave:async()=>(await C.stopAutoSave().save(),w=t.addDidFinishTransactionListener(((t,e)=>{const[a,s]=e();y(a)&&y(s)||C.save((()=>[a,s]))})),C),stopAutoSave:()=>(a(w,t.delListener),w=void 0,C),schedule:async(...t)=>(((t,...e)=>{t.push(...e)})(f(g,l),...t),await(async()=>{if(!f(p,l)){for(h(p,l,1);!e((t=f(g,l),A=t.shift()));)try{await A()}catch(t){r?.(t)}h(p,l,0)}var t})(),C),getStore:()=>t,destroy:()=>C.stopAutoLoad().stopAutoSave(),getStats:()=>({})};return d&&(C[d]=()=>u),o(C)})(t,(async()=>2==u(s.doc[n])?w(s.doc,n):void 0),(async(t,o)=>s.change((s=>((t,s,n,o)=>{((t,e)=>{y(t[e])&&(t[e]={t:{},v:{}})})(t,s);const[i,u]=w(t,s),l=()=>{f=1};let f=1;if(a(o?.(),(([t,s])=>{f=0,d(t,((t,s)=>f?0:e(t)?r(i,s):a(i[s],(s=>d(t,((t,n)=>f?0:e(t)?r(s,n):a(c(s,n),(a=>d(t,((t,s)=>e(t)?r(a,s):a[s]=t))),l)))),l))),d(s,((t,a)=>f?0:e(t)?r(u,a):u[a]=t))})),f){const[t,e]=n();A(i,void 0,t,((t,e,a)=>A(i,e,a,((t,e,a)=>A(t,e,a,((t,e,a)=>{if(c(t,e)!==a)return t[e]=a,1})))))),A(u,void 0,e,((t,e,a)=>{c(u,e)!==a&&(u[e]=a)}))}})(s,n,t,o)))),(t=>{const e=({doc:e})=>t((()=>w(e,n)));return s.on("change",e),e}),(t=>{s.removeListener("change",t)}),i,["getDocHandle",s]))},"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).TinyBasePersisterAutomerge={});
